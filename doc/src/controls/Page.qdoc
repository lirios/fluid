/****************************************************************************
 * This file is part of Fluid.
 *
 * Copyright (C) 2018 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
 * Copyright (C) 2018 Michael Spencer <sonrisesoftware@gmail.com>
 *
 * $BEGIN_LICENSE:FDL$
 *
 * Permission is granted to copy, distribute and/or modify this document
 * under the terms of the GNU Free Documentation License, Version 1.3
 * or any later version published by the Free Software Foundation;
 * with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
 * A copy of the license is included in the section entitled "GNU
 * Free Documentation License".
 *
 * $END_LICENSE$
 ***************************************************************************/

/*!
   \qmltype Page
   \inqmlmodule Fluid.Controls
   \ingroup fluidcontrols

   \brief Represents a page on the navigation page stack.

   Example:

   \qml
   import QtQuick 2.10
   import Fluid.Controls 1.1 as FluidControls

   FluidControls.Page {
       title: "Application Name"

       actions: [
           FluidControls.Action {
               name: "Print"

               // Icon name from the Google Material Design icon pack
               icon.source: FluidControls.Utils.iconUrl("action/print")
           }
       ]
   }
   \endqml
*/

/*!
    \qmlproperty Fluid.Controls::AppBar Fluid.Controls::Page::appBar

    The action bar for this page. Use it as a group property to customize
    this page's action bar. See the \l Page example for details on how to use
    this property.
*/

/*!
    \qmlproperty list<Fluid.Controls::Action> Fluid.Controls::Page::actions

    The page's actions shown in the action bar.
*/

/*!
    \qmlproperty Fluid.Controls::Action Fluid.Controls::Page::leftAction

    The action shown to the left of the title in the action bar. By default,
    this is a back button which shows when there is a page behind the current
    page in the page stack. However, you can replace it with your own action,
    for example, an icon to open a navigation drawer when on your root page.
*/

/*!
    \qmlproperty bool Fluid.Controls::Page::canGoBack

    Set by the page stack to true if there is a page behind this page on the
    page stack.

    The default value is \c false.
*/

/*!
    \qmlproperty list<Item> Fluid.Controls::Page::customContent

    Custom content to show instead of the title.

    \since Fluid.Controls 1.1
*/

/*!
    \qmlproperty Fluid.Controls::PageSidebar Fluid.Controls::Page::rightSidebar

    A sidebar to show on the right of the page. This will have its own
    app bar and title, which will split the toolbar into two app bars.

    \since Fluid.Controls 1.1
*/

/*!
    \qmlsignal void Fluid.Controls::Page::goBack(var event)

    This signal is emitted when the back action is triggered or back key is released.

    The \a event is provided with the signal.

    By default, the page will be popped from the page stack. To change the default
    behavior, for example to show a confirmation dialog, listen for this signal using
    \c onGoBack and set \c event.accepted to \c true. To dismiss the page from your
    dialog without triggering this signal and re-showing the dialog, call
    \c page.forcePop().

    \sa Fluid.Controls::Page::forcePop()
*/

/*!
    \qmlmethod void Fluid.Controls::Page::pop(event event, bool force)

    Pop this page from the page stack. This does nothing if this page is not
    the current page on the page stack.

    The \a event will be passed to the \l goBack signal.

    Use \a force to avoid calling the \l goBack signal. This is useful if you
    use the \l goBack signal to show a confirmation dialog, and want to close
    the page from your dialog without showing the dialog again. You can also
    use \l Fluid.Controls::Page::forcePop() as a shortcut to this behavior.

    \sa Fluid.Controls::Page::forcePop()
*/

/*!
    \qmlmethod void Fluid.Controls::Page::forcePop()

    Force a pop from the page stack.
*/

/*!
    \qmlmethod void Fluid.Controls::Page::push(Component component, object properties)

    Push the specified \a component onto the page stack and set the \a properties.

    \sa StackView::push()
*/
